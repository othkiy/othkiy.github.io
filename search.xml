<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>在vps上搭建ss</title>
      <link href="/2018/12/09/%E5%9C%A8DigitalOcean%E7%9A%84vps%E4%B8%8B%E6%90%AD%E5%BB%BAss/"/>
      <url>/2018/12/09/%E5%9C%A8DigitalOcean%E7%9A%84vps%E4%B8%8B%E6%90%AD%E5%BB%BAss/</url>
      
        <content type="html"><![CDATA[<h2 id="在DigitalOcean服务器下搭建ss的简单步骤"><a href="#在DigitalOcean服务器下搭建ss的简单步骤" class="headerlink" title="在DigitalOcean服务器下搭建ss的简单步骤"></a>在DigitalOcean服务器下搭建ss的简单步骤</h2><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://www.jianshu.com/p/7b315ef8e978" target="_blank" rel="noopener">YoungDayo的简书</a></li><li><a href="https://segmentfault.com/a/1190000011564797#articleHeader12" target="_blank" rel="noopener">SilentGene的博客</a></li><li>连接到服务器的软件<a href="https://www.netsarang.com/download/down_form.html?code=622" target="_blank" rel="noopener">Xshell</a></li></ol><hr><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><ul><li><a href="">windows版shadowsocks下载</a></li><li><a href="https://pan.baidu.com/s/1lyr2DeCcAOpvzo_XZuvpCQ" target="_blank" rel="noopener">ios Shadowrocket下载</a></li><li><a href="https://github.com/shadowsocks/shadowsocks-android/releases/download/v4.5.7/shadowsocks--universal-4.5.7.apk" target="_blank" rel="noopener">安卓版下载</a></li><li>也可以使用一键脚本搭建插件，<a href="https://segmentfault.com/a/1190000015243145?utm_source=tag-newest" target="_blank" rel="noopener">如</a></li></ul><ol><li><h2 id="连接到服务器"><a href="#连接到服务器" class="headerlink" title="连接到服务器"></a>连接到服务器</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> root@ip</code></pre><p>ip和要求输入的密码为在购买后DigitalOcean向<strong>账户邮箱中发送的邮件</strong>中<br>与输入后再次要求输入UNIX的密码相同<br>输入正确后会让用户修改密码</p></li><li><h2 id="下载依赖组件"><a href="#下载依赖组件" class="headerlink" title="下载依赖组件"></a>下载依赖组件</h2></li></ol><ol><li>Python<pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> m2crypto python-setuptools</code></pre></li><li>pip<pre class=" language-bash"><code class="language-bash">easy_install pip</code></pre></li><li><p>shadowsocks</p><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> shadowsocks</code></pre></li><li><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>修改shadowsocks的配置文件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/shadowsocks.json</code></pre><ul><li>单个用户配置<pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span><span class="token string">"server"</span><span class="token keyword">:</span><span class="token string">"0.0.0.0"</span>,<span class="token string">"server_port"</span>:443,       <span class="token comment" spellcheck="true">#连接端口</span><span class="token string">"local_address"</span><span class="token keyword">:</span> <span class="token string">"127.0.0.1"</span>,<span class="token string">"local_port"</span>:1080,<span class="token string">"password"</span><span class="token keyword">:</span><span class="token string">"password"</span>,        <span class="token comment" spellcheck="true">#密码</span><span class="token string">"timeout"</span>:300,<span class="token string">"method"</span><span class="token keyword">:</span><span class="token string">"aes-256-cfb"</span>,   <span class="token comment" spellcheck="true">#加密方式</span><span class="token string">"fast_open"</span><span class="token keyword">:</span> false,<span class="token string">"workers"</span><span class="token keyword">:</span> 1<span class="token punctuation">}</span></code></pre></li><li>多个用户配置<pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span><span class="token string">"server"</span><span class="token keyword">:</span><span class="token string">"0.0.0.0"</span>,<span class="token string">"local_address"</span><span class="token keyword">:</span> <span class="token string">"127.0.0.1"</span>,<span class="token string">"local_port"</span><span class="token keyword">:</span> 1080,<span class="token string">"timeout"</span><span class="token keyword">:</span> 300,<span class="token string">"method"</span><span class="token keyword">:</span> <span class="token string">"aes-256-cfb"</span>,<span class="token string">"port_password"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>   <span class="token string">"8401"</span><span class="token keyword">:</span> <span class="token string">"passwd1"</span>,   <span class="token string">"8402"</span><span class="token keyword">:</span> <span class="token string">"passwd2"</span>,   <span class="token string">"8403"</span><span class="token keyword">:</span> <span class="token string">"passwd3"</span><span class="token punctuation">}</span>,<span class="token string">"_comment"</span><span class="token keyword">:</span><span class="token punctuation">{</span>   <span class="token string">"8401"</span><span class="token keyword">:</span> <span class="token string">"user1"</span>,   <span class="token string">"8402"</span><span class="token keyword">:</span> <span class="token string">"user2"</span>,   <span class="token string">"8403"</span><span class="token keyword">:</span> <span class="token string">"user3"</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><h2 id="运行ss"><a href="#运行ss" class="headerlink" title="运行ss"></a>运行ss</h2></li></ol><ul><li><h4 id="将ss设置为后台运行-每次开机需手动打开"><a href="#将ss设置为后台运行-每次开机需手动打开" class="headerlink" title="将ss设置为后台运行(每次开机需手动打开)"></a>将ss设置为后台运行(每次开机需手动打开)</h4><pre class=" language-bash"><code class="language-bash">sssever -c /etc/shadowsocks.json -d start  <span class="token comment" spellcheck="true">#后台运行</span>sssever -c /etc/shadowsocks.json -d stop   <span class="token comment" spellcheck="true">#后台停止</span></code></pre></li><li><h4 id="将ss设置为开机启动"><a href="#将ss设置为开机启动" class="headerlink" title="将ss设置为开机启动"></a>将ss设置为开机启动</h4></li><li><p>编辑文件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/systemd/system/shadowsocks.sevice</code></pre><p>写入以下内容</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description<span class="token operator">=</span>Shadowsocks<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>TimeoutStartSec<span class="token operator">=</span>0ExecStart<span class="token operator">=</span>/usr/bin/ssserver -c /etc/shadowsocks.json<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi-user.target</code></pre><p>保存退出<br>依次输入</p><pre class=" language-bash"><code class="language-bash">systemctl <span class="token function">enable</span> shadowsocks  <span class="token comment" spellcheck="true">#设置为机启动</span>systemctl start shadowsocks   <span class="token comment" spellcheck="true">#启动ss</span>systemctl status shadowsocks  <span class="token comment" spellcheck="true">#查看状态</span></code></pre><p>此时ss服务器已经配置完成，可以使用</p><h2 id="5-用BBR对ss服务器加速"><a href="#5-用BBR对ss服务器加速" class="headerlink" title="5. 用BBR对ss服务器加速"></a>5. 用BBR对ss服务器加速</h2></li></ul><h5 id="1-正常BBR"><a href="#1-正常BBR" class="headerlink" title="1.正常BBR"></a>1.正常BBR</h5><ul><li>安装wget基础包</li></ul><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token function">wget</span></code></pre><p>​            下载</p><ul><li><strong>安装BBR</strong></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</code></pre><ul><li><strong>获取读写权限</strong><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> +x bbr.sh</code></pre></li><li>启动安装</li></ul><pre class=" language-bash"><code class="language-bash">./bbr.sh</code></pre><ul><li>查看BBR状态</li></ul><pre class=" language-bash"><code class="language-bash">lsmod <span class="token operator">|</span> <span class="token function">grep</span> bbr</code></pre><ol start="2"><li><h5 id="魔改BBR"><a href="#魔改BBR" class="headerlink" title="魔改BBR"></a>魔改BBR</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> -N --no-check-certificate <span class="token string">"https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh"</span><span class="token operator">&amp;&amp;</span> <span class="token function">chmod</span> +x tcp.sh <span class="token operator">&amp;&amp;</span> ./tcp.sh</code></pre>运行完后输入1，重启再次进入后输入4，安装完毕，服务器重启。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Basic </tag>
            
            <tag> vps </tag>
            
            <tag> ss </tag>
            
            <tag> Learn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用python自带的flask框架实现网页</title>
      <link href="/2018/12/08/%E7%94%A8python%E8%87%AA%E5%B8%A6%E7%9A%84flask%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E7%BD%91%E9%A1%B5/"/>
      <url>/2018/12/08/%E7%94%A8python%E8%87%AA%E5%B8%A6%E7%9A%84flask%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E7%BD%91%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="用flask搭建实现生成身份证网页的简单步骤"><a href="#用flask搭建实现生成身份证网页的简单步骤" class="headerlink" title="用flask搭建实现生成身份证网页的简单步骤"></a>用flask搭建实现生成身份证网页的简单步骤</h2><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><p><a href="http://docs.jinkan.org/docs/flask/" target="_blank" rel="noopener">Flask官方文档</a></p></li><li><p><a href="https://www.bilibili.com/video/av19817183?from=search&amp;seid=8231622821755260748" target="_blank" rel="noopener">bilibili教学视频</a></p></li></ol><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><ol><li>在python下写出生成随机身份证的程序<br><code>`</code>  bash<br>from datetime import date<br>from datetime import timedelta<br>import random</li></ol><p>def getdistrictcode():<br>    codelist = []<br>    file = open(‘districtcode.txt’)<br>    lines = file.readlines() #逐行读取<br>    for line in lines:<br>        if  line.lstrip().rstrip().strip()!=’’ and (line.lstrip().rstrip().strip())[:6][-2:]!=’00’: #如果每行中去重后不为空，并且6位数字中最后两位不为00，则添加到列表里。（最后两位为00时为省份或地级市代码）<br>            codelist.append(line[:6])</p><pre><code>        # print(line[:6])        # print(codelist)return codelist</code></pre><p>def gennerator():<br>    codelist = getdistrictcode()<br>    id = codelist[random.randint(0,len(codelist))] #地区项<br>    id = id + str(random.randint(1950,1998)) #年份项<br>    da  = date.today()+timedelta(days=random.randint(1,366)) #月份和日期项<br>    id = id + da.strftime(‘%m%d’)<br>    id = id+ str(random.randint(100,300))#，顺序号简单处理</p><pre><code>i = 0count = 0weight = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2] #权重项checkcode ={&#39;0&#39;:&#39;1&#39;,&#39;1&#39;:&#39;0&#39;,&#39;2&#39;:&#39;X&#39;,&#39;3&#39;:&#39;9&#39;,&#39;4&#39;:&#39;8&#39;,&#39;5&#39;:&#39;7&#39;,&#39;6&#39;:&#39;6&#39;,&#39;7&#39;:&#39;5&#39;,&#39;8&#39;:&#39;5&#39;,&#39;9&#39;:&#39;3&#39;,&#39;10&#39;:&#39;2&#39;} #校验码映射for i in range(0,len(id)):   count = count +int(id[i])*weight[i]id = id + checkcode[str(count%11)] #算出校验码return id</code></pre><p>if <strong>name</strong> == ‘<strong>main</strong>‘:<br>print(gennerator())</p><pre><code>2. ### 下载[PyCharm专业版](https://download.jetbrains.8686c.com/python/pycharm-professional-2018.3.1.exe)[激活教程](https://blog.csdn.net/pdcfighting/article/details/82052055)3. ### 设置虚拟环境 1. 安装Virtualenv``` bashpip install virtualenv</code></pre><ol start="2"><li>安装Flask<pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> Flask</code></pre></li><li>在任意位置创建文件夹<pre class=" language-bash"><code class="language-bash">virtualenv xxx <span class="token comment" spellcheck="true">#文件名</span></code></pre><ol start="4"><li>激活虚拟环境<pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> xxx/bin/activate</code></pre></li><li><h3 id="在PyCharm中新建Flask项目"><a href="#在PyCharm中新建Flask项目" class="headerlink" title="在PyCharm中新建Flask项目"></a>在PyCharm中新建Flask项目</h3><h5 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h5>File-new Project-Flask</li></ol></li></ol><h5 id="在PyCharm中创建html文件"><a href="#在PyCharm中创建html文件" class="headerlink" title="在PyCharm中创建html文件"></a>在PyCharm中创建html文件</h5><p>右键templates-new-HTML File</p><h5 id="在项目中新建文件"><a href="#在项目中新建文件" class="headerlink" title="在项目中新建文件"></a>在项目中新建文件</h5><ol start="5"><li><h3 id="在新建文件中将写好的-py文件复制进去并修改"><a href="#在新建文件中将写好的-py文件复制进去并修改" class="headerlink" title="在新建文件中将写好的.py文件复制进去并修改"></a>在新建文件中将写好的.py文件复制进去并修改</h3></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mooc </tag>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在虚拟机(Virtual Box)中安装ArchLinux</title>
      <link href="/2018/12/06/%E5%9C%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E5%AE%89%E8%A3%85ArchLinux/"/>
      <url>/2018/12/06/%E5%9C%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E5%AE%89%E8%A3%85ArchLinux/</url>
      
        <content type="html"><![CDATA[<p>在Virtual Box下安装ArchLinux的简单步骤</p><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><p><a href="https://wiki.archlinux.org/index.php/Installation_guide" target="_blank" rel="noopener">ArchWiki</a></p></li><li><p><a href="https://www.bilibili.com/video/av17575653?t=1239" target="_blank" rel="noopener">bilibli视屏教程</a></p></li><li><p>国内高校开源镜像站。（<a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">清华</a>）</p></li></ol><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><h3 id="BIOS的两种形式"><a href="#BIOS的两种形式" class="headerlink" title="BIOS的两种形式"></a>BIOS的两种形式</h3><p>  <strong>BIOS包含UEFI和legacy（传统）两种启动模式</strong>，<strong>UEFI</strong>全称“统一的可扩展固件接口”(Unified Extensible Firmware Interface)， 是一种详细描述类型接口的标准。这种接口用于操作系统自动从预启动的操作环境，加载到一种操作系统上。UEFI方式减少了BIOS的自检过程，因此能够缩短开机时间，UEFI只支持64为系统且磁盘分区必须为gpt模式。如果你的PC在UEFI启动模式下预装了Win10，你会发现有两个很小的隐藏分区。一个叫<strong>ESP</strong>(EFI系统分区)，另一个<strong>MSR</strong>(Microsoft保留分区，通常为128MB)，MSR是windows要求的。ESP对UEFI启动模式很重要，UEFI的引导程序是以后缀名为.efi的文件存放在ESP分区中的，ESP分区采用fat32文件系统。此外，可能还存在一个小分区叫<strong>WinRETools</strong>，这个是win10的恢复分区</p><h4 id="CSM"><a href="#CSM" class="headerlink" title="CSM"></a>CSM</h4><p>  CSM是一个兼容支持模块，可以让新的UEFI BIOS兼容老的legacy+MBR启动模式。</p><h4 id="GPT"><a href="#GPT" class="headerlink" title="GPT"></a>GPT</h4><p>  GPT是一种<strong>新型磁盘模式</strong>，与我们常用的MBR磁盘相比更稳定，自纠错能力更强，一块磁盘上主分区数量不受限制，支持大于2T的总容量及大于2T的分区，并且几乎没有上限，最大支持到128个分区，分区大小支持到256TB。</p><h4 id="分区模式"><a href="#分区模式" class="headerlink" title="分区模式"></a>分区模式</h4><p><strong>GPT</strong></p><p><strong>GUID磁盘分区表</strong>（<strong>GUID Partition Table</strong>，缩写：<strong>GPT</strong>）其含义为“全局唯一标识磁盘分区表”，是一个实体硬盘的<a href="https://baike.baidu.com/item/%E5%88%86%E5%8C%BA%E8%A1%A8/215102" target="_blank" rel="noopener">分区表</a>的结构布局的标准。它是<a href="https://baike.baidu.com/item/%E5%8F%AF%E6%89%A9%E5%B1%95%E5%9B%BA%E4%BB%B6%E6%8E%A5%E5%8F%A3" target="_blank" rel="noopener">可扩展固件接口</a>（<a href="https://baike.baidu.com/item/EFI" target="_blank" rel="noopener">EFI</a>）标准（被Intel用于替代个人计算机的<a href="https://baike.baidu.com/item/BIOS" target="_blank" rel="noopener">BIOS</a>）的一部分，被用于替代BIOS系统中的一64bits来存储逻辑块地址和大小信息的主开机纪录（MBR）分区表。</p><ul><li><h4 id="设置EFi"><a href="#设置EFi" class="headerlink" title="设置EFi"></a>设置EFi</h4></li></ul><p>运行virtualbox后，在左侧选择要设置的虚拟机</p><p>右键选择设置或者直接点击菜单栏上的设置</p><p>打开系统，勾选启用efi</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h4 id="1-timedatectl-status查看系统时钟"><a href="#1-timedatectl-status查看系统时钟" class="headerlink" title="1. timedatectl status查看系统时钟"></a>1. timedatectl status查看系统时钟</h4><pre class=" language-bash"><code class="language-bash">timedatectl status</code></pre><p>设置系统时钟</p><pre class=" language-bash"><code class="language-bash">timedatectl set-ntp <span class="token boolean">true</span></code></pre><h4 id="2-使用ping-网址检查网络连接"><a href="#2-使用ping-网址检查网络连接" class="headerlink" title="2. 使用ping+网址检查网络连接"></a>2. 使用ping+网址检查网络连接</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">ping</span> www.baidu.com</code></pre><h4 id="3-分区"><a href="#3-分区" class="headerlink" title="3. 分区"></a>3. 分区</h4><p>使用对新人友好的cfdisk进行分区</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cfdisk</span></code></pre><p>选定gpt 在free space下新建文件</p><p>设置大小后</p><pre class=" language-bash"><code class="language-bash">ESC:wq<span class="token punctuation">(</span>write quite<span class="token punctuation">)</span></code></pre><p>查看分区文件</p><pre class=" language-bash"><code class="language-bash">lsblk</code></pre><p>查看硬盘及分区信息</p><pre class=" language-bash"><code class="language-bash"><span class="token function">fdisk</span> -l</code></pre><h4 id="4-对分区进行格式化"><a href="#4-对分区进行格式化" class="headerlink" title="4. 对分区进行格式化"></a>4. 对分区进行格式化</h4><ol><li>文件<pre class=" language-bash"><code class="language-bash">mkfs.ext4 /dev/xxx</code></pre></li><li>Swap<pre class=" language-bash"><code class="language-bash">mkswap -f /dev/xxx（swap为**虚拟内存**不够时使用）</code></pre> 启用swap文件<pre class=" language-bash"><code class="language-bash"> swapon /dev/xxx</code></pre></li><li>EFI<pre class=" language-bash"><code class="language-bash">mkfs.vfat /dec/xxx</code></pre><h4 id="5-设置镜像网站来加快下载速度"><a href="#5-设置镜像网站来加快下载速度" class="headerlink" title="5. 设置镜像网站来加快下载速度"></a>5. 设置镜像网站来加快下载速度</h4>修改下载网站首选项<pre class=" language-bash"><code class="language-bash">vim /etc/pacman.d/mirrorlist</code></pre> 或<pre class=" language-bash"><code class="language-bash"><span class="token function">nano</span> /etc/pacman.d/mirrorlist</code></pre>若此目录下无该文件则两个命令都会<strong>自动创建</strong></li></ol><p>将选定的地址按 ‘ 2 ’ + ‘dd ‘ 剪切两行</p><p>再在最开始的地方按 ‘ p ’ 粘贴将此地址作为下载首选项</p><p>vim下</p><pre class=" language-bash"><code class="language-bash">ESC:wq</code></pre><p>nano则根据<strong>屏幕下方提示</strong></p><h4 id="6-挂载文件"><a href="#6-挂载文件" class="headerlink" title="6. 挂载文件"></a>6. 挂载文件</h4><p>将sda1挂载到mnt</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mount</span> /dev/sda1 /mnt </code></pre><p>在’/mnt’目录下创建文件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> /mnt/xxx</code></pre><h4 id="7-下载软件包"><a href="#7-下载软件包" class="headerlink" title="7. 下载软件包"></a>7. 下载软件包</h4><p>在mnt目录下通过之前设置好的地址下载base包（基本软件包）</p><pre class=" language-bash"><code class="language-bash">pacstrap /mnt base</code></pre><p>完成后可下载base-devel扩展包，内含开发常用的包</p><pre class=" language-bash"><code class="language-bash">pastrap /mnt base-devel</code></pre><h4 id="8-输出文件"><a href="#8-输出文件" class="headerlink" title="8. 输出文件"></a>8. 输出文件</h4><pre class=" language-bash"><code class="language-bash">gnfstab -U /mnt <span class="token operator">>></span> /mnt/etc/fstab</code></pre><p>查看文件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> /mnt/etc/fstab</code></pre><h4 id="9-打开在之前在mnt目录下下载的鑫系统（用户名，主机名改变）"><a href="#9-打开在之前在mnt目录下下载的鑫系统（用户名，主机名改变）" class="headerlink" title="9. 打开在之前在mnt目录下下载的鑫系统（用户名，主机名改变）"></a>9. 打开在之前在mnt目录下下载的鑫系统（用户名，主机名改变）</h4><pre class=" language-bash"><code class="language-bash">ach-chroot /mnt</code></pre><h4 id="10-设置时区"><a href="#10-设置时区" class="headerlink" title="10. 设置时区"></a>10. 设置时区</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">ln</span> -sf/usr/share/zoneinfo/Regin/City/etc/localtime<span class="token function">ln</span> -sf/usr/share/zoneinfo/Asia/Shanghai /etc/localtime<span class="token punctuation">(</span>中国大陆使用<span class="token punctuation">)</span></code></pre><h5 id="设置硬件时间"><a href="#设置硬件时间" class="headerlink" title="设置硬件时间"></a>设置硬件时间</h5><pre class=" language-bash"><code class="language-bash">hwclock -–systohc</code></pre><h4 id="11-设置软件使用语言"><a href="#11-设置软件使用语言" class="headerlink" title="11. 设置软件使用语言"></a>11. 设置软件使用语言</h4><h5 id="1-安装所需文件"><a href="#1-安装所需文件" class="headerlink" title="1. 安装所需文件"></a>1. 安装所需文件</h5><pre class=" language-bash"><code class="language-bash">pacman -S vim</code></pre><h5 id="2-编辑文本"><a href="#2-编辑文本" class="headerlink" title="2. 编辑文本"></a>2. 编辑文本</h5><pre class=" language-bash"><code class="language-bash">vim /etc/locale.gen</code></pre><h5 id="3-查找"><a href="#3-查找" class="headerlink" title="3. 查找"></a>3. 查找</h5><pre class=" language-bash"><code class="language-bash">esc /zh_CN</code></pre><p>找到需要的语言’x’删除其前面的#”后</p><pre class=" language-bash"><code class="language-bash">:wq</code></pre><p>保存退出</p><h5 id="使用刚才编辑的文件"><a href="#使用刚才编辑的文件" class="headerlink" title="使用刚才编辑的文件"></a>使用刚才编辑的文件</h5><pre class=" language-bash"><code class="language-bash">locale-gen</code></pre><h4 id="12-设置变量"><a href="#12-设置变量" class="headerlink" title="12. 设置变量"></a>12. 设置变量</h4><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> ‘LANG<span class="token operator">=</span>zh_CN.UTF-8’ <span class="token operator">></span> /etc/locale.conf</code></pre><h5 id="在’locale-conf’中写入"><a href="#在’locale-conf’中写入" class="headerlink" title="在’locale.conf’中写入"></a>在’locale.conf’中写入</h5><pre class=" language-bash"><code class="language-bash">LANG<span class="token operator">=</span>zh_CN.UTF-8</code></pre><h4 id="13-在chroot中安装网络驱动"><a href="#13-在chroot中安装网络驱动" class="headerlink" title="13. 在chroot中安装网络驱动"></a>13. 在chroot中安装网络驱动</h4><pre class=" language-bash"><code class="language-bash">pacman -S iw wpa_supplicant dialog</code></pre><p><strong>使用ping查看网络</strong></p><h4 id="13-设置chroot密码"><a href="#13-设置chroot密码" class="headerlink" title="13. 设置chroot密码"></a>13. 设置chroot密码</h4><pre class=" language-bash"><code class="language-bash">passwr xxxxx</code></pre><p>直接输入密码 <strong>密码已隐藏</strong></p><h4 id="14-因特尔cpu安装支持程序"><a href="#14-因特尔cpu安装支持程序" class="headerlink" title="14. 因特尔cpu安装支持程序"></a>14. 因特尔cpu安装支持程序</h4><pre class=" language-bash"><code class="language-bash">$ pacman -S intel-ucode</code></pre><h4 id="15-安装引导加载程序"><a href="#15-安装引导加载程序" class="headerlink" title="15. 安装引导加载程序"></a>15. 安装引导加载程序</h4><pre class=" language-bash"><code class="language-bash">pacman -S grub <span class="token punctuation">(</span>efibootmgr<span class="token punctuation">)</span>    grub-install –target<span class="token operator">=</span>x86_64-efi –efi-drectory<span class="token operator">=</span>/xxx/xxx –bootloader-id<span class="token operator">=</span>grubgrub-mkconfig -o /boot/grub/grub.cfg</code></pre><h4 id="16-配置完成退出chroot"><a href="#16-配置完成退出chroot" class="headerlink" title="16.配置完成退出chroot"></a>16.配置完成退出chroot</h4><pre class=" language-bash"><code class="language-bash"><span class="token keyword">exit</span><span class="token function">reboot</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Mooc </tag>
            
            <tag> Basic </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/12/03/hello-world/"/>
      <url>/2018/12/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Learn </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
